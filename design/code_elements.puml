@startuml

note as copyright_note
  Copyright (C) 2014-2016  Thilo Fischer.
  
  This diagram is part of the developer documentation of rocc.
 
  rocc is free software with a multi-license approach: you can
  redistribute it and/or modify it as if it was under the terms of the
  GNU General Public License as long as the things you publish to
  satisfy the GPL's copyleft still can be integrated into the rocc
  project's main codebase without restricting the multi-license
  approach. See LICENSE.txt from the top-level directory for details.
 
  The same applies to this document.
end note

skinparam monochrome true

note as N1
  This diagram does not depict the current
  implemention, but the planned rework of it.
end note

'      =============
package BaseClasses <<Frame>> #EEEEEE {
'      =============

class Element {
  + initialize(origin :Element)
  - announce()
  + origin()
  ' string representation of this element useful to identify it in debugging context
  + to_s()
  ' elements within this element's 'scope'
  + content()
  + content?()
  ' return all elements within this element's 'scope' that match the condition specified by 'what'
  + get_contained(what)
  ' source code representing this element
  + text()
  + register(obj :Element, key)
  # type_error(object)
}
note top: Base class of all classes in this diagram.

class AtomicElement {
  
}
note right: formally known as CodeObject
AtomicElement --|>  Element

class CollectionElement {
  
}
CollectionElement --|>  Element

class ElementRange {
  first() : Element
  last()  : Element
  contains?(e :Element)
}
ElementRange --|> CollectionElement

class ElementList {
}
ElementList --|> CollectionElement

'       =============
' endpkg BaseClasses
'       =============
}

'      =================
package FileRepresented <<Frame>> #EEEEEE {
'      =================

class Module {
  type : Executable, DynamicLib, StaticLib
  + symbols(filter = nil) : { Identifier => Symbol }
  + linker_options : String[]
  + external_libs : String[]
}
Module "0..n" --> "0..n" Module : depends_on >

class TranslationUnit {
  + symbols(filter = nil) : { Identifier => Symbol }
}
Module "0..n" -- "1..n" TranslationUnit : origin >

class FilesystemElement {
  ' Relative path of this FilesystemElement wrt its base_directory
  + rel_path()  : String
  ' absolute path to this FilesystemElement
  + abs_path() : String
  ' path as specified by build setup and/or source code
  + path()  : String
}

class File {
  + type() : Source, Header, Other
  ' Filename without directory prefix and without filename extension
  + basename : String
  ' filename extension (excluding the introducing '.' character)
  + fileext : String
  ' Modification time stamp, will be used for quick file modification check
  + mod_date : Date
  ' Checksum on the file content, will be used for sound file modification check
  + checksum : String
  ' From where did the analysis lead rocc to this file? Can be multiple sources.
  + adducer alias origin : File(s), Command Line Args, ...
  + symbols(filter = nil) : { Identifier => Symbol }
}
FilesystemElement <|-- File
TranslationUnit   "0..n"  -- "1" File : origin alias main_file >
TranslationUnit "0..n" -- "0..n" File : include_files >
Symbol "0..n" <-- "1..n" File : symbols <

class Directory {
  + name : String
}
FilesystemElement <|-- Directory
FilesystemElement "0..n" <--> "1" Directory : content <

class BaseDirectory {
  + path : String
}
Directory <|-- BaseDirectory
'' A BaseDirectory's base_directory is the object itself.
'FilesystemElement "0..n" --> "1" BaseDirectory : base_directory

'       =================
' endpkg FileRepresented
'       =================
}

'      =================
package CharRepresented <<Frame>> #EEEEEE {
'      =================

class PhysicalLine {
  line_number
}
File "1" -- "0..n" PhysicalLine : origin, content alias lines
PpDirLine "0..1" <-- "0..n" PhysicalLine : line_directive <

class LogicalLine {
}
PhysicalLine "1..n"  -- "1" LogicalLine : origin <
PpDirConditional "0..n" -- "0..n" LogicalLine : conditions <

class Token {
  + line_offset : Integer
  ' to save alignments over multiple lines when refactoring code and changing the length of a token (planned nice-too-have feature ...)
  + whitespace_after : String
}
LogicalLine "1..n" -- "0..n" Token : content alias tokens >
' The directly previous/next Token, may be any Token in this file
' Multiplicity 0 only allowed at the very beginning/end of a file
Token "0..1" <--> "0..1" Token : direct_predecessor/direct_successor
' The previous/next Token that is not a comment or part of a preprocessor directive, might be a Token from another file
' Multiplicity 0 only allowed at the very beginning/end of a translation unit
Token "0..1" <--> "0..1" Token : effective_predecessor/effective_successor

Token  <|-- TknComment
note on link : Comments are handled as Tokens in rocc.

Token  <|-- TknPreprocessor
note on link : Preprocessor directives are handled as Tokens in rocc.

Token  <|-- TknWord
TknWord <|-- TknKeyword
TknWord <|-- TknIdentifier

Token <|-- TknStringliteral
Token <|-- TknNumber
Token <|-- Tkn3Char
Token <|-- Tkn2Char
Token <|-- Tkn1Char

' The will be no Specification objects, each Specification is either a Declaration or a Definition
abstract class Specification {
}
Token "1..n" -- "0..1" Specification : origin <

'       =================
' endpkg CharRepresented
'       =================
}


'      =============
package Semantics <<Frame>> #EEEEEE {
'      =============

class Declaration {
}
Specification <|-- Declaration

class Definition {
}
Specification <|-- Definition


class Symbol {
  + name : String
  + namespace() : Namespace
  + linkage : Linkage
  # add_origin(spec : Specification)
}
note top
  Anything in the source code which can be
  ssociated with something like a name:
  Anything called a symbol by the linker
  (varibles, functions), classes/structs/unions/enums,
  also types and macros.
end note
PpDirConditional "0..n" -- "0..n" Symbol : conditions <
' All specifications and all usages of a Symbol is a reference to it.
TknIdentifier "1..n" <-- "0..n" Symbol : reference <

Specification "1..n" -- "1..n" Symbol : origin <

enum Namespace {
  :ordinary
  :member
  :tag
  :label
  :macro
}

enum Linkage {
  :external
  :internal
  :none
}


class TypedSymbol {
  + namespace() -> :ordinary
}
Symbol <|-- TypedSymbol
Type "1" <-- "0..n" TypedSymbol : type <

Type <|-- TypeNative
class TypeNative {
  + name : String
}
note bottom
void char short
int long float
double signed
unsigned ...
end note

'Type <|-- TypeCompound
'TypeCompound "0..n" -- "1" SymbolCompound
'Type <|-- TypeEnum
'TypeEnum "0..n" -- "1" Enum
Type <|-- TypeTagged
TypeTagged "0..n" -- "0..1" SymbolCompound
TypeTagged "0..n" -- "0..1" Enum

Type <|-- TypePointer
TypePointer "0..1/n" --> "1" Type : + base_type >

Type <|-- TypeDefined
TypeDefined "1" --> "1" Typedef

Type <|-- TypeWithStorageClass
TypeWithStorageClass "0..n" --> "1" Type : + base_type >
class TypeWithStorageClass {
  + storage_class : StorageClassSpecifier
}
enum StorageClassSpecifier {
  :auto
  :register
  :static
  :extern
  :typedef ???
}

Type <|-- TypeWithQualifier
TypeWithQualifier "0..n" --> "1" Type : + base_type >
class TypeWithQualifier {
  + qualifier : TypeQualifier
}
enum TypeQualifier {
  :const
  :volatile
}

class TypeFunction {
  + variadic?
}
Type <|-- TypeFunction
TypeFunction "0..n" --> "1" Type : return_type >
TypeFunction "0..n" --> "0..n" FunctionParameter : parameter_types >

class FunctionParameter {
  + linkage() -> :none
  ' name used in implementation (if available), name used in specification (if unique), nil otherwise
  + name()
  ' same name used in all the function's specifications?
  + name_consistent?()
}
Type "1" <-- "0..n" FunctionParameter : type

TypedSymbol <|-- Typedef
class Typedef {
  + linkage() -> :none
}
TypedSymbol <|-- Variable

class Function {
  ' if param_count > 0
  + parameters?()
  + param_count()
  ' implementation found?
  + implementation?()
}
TypedSymbol <|-- Function
Function "0..1" -- "1..n" BlockStatement : implementation >
Function "0..n" --> "1" TypeFunction : type >


class FunctionSignature {
  + param_names : String[]
}
' Only if it is a function's specification.
Specification "1" -- "0..1" FunctionSignature
Function "1" -- "1..n" FunctionSignature
' FIXME How to handle multiple different but consistent signatures?

class SymbolCompound {
  + members?()
+ member_count : Integer
  + namespace() -> :tag
}
Symbol <|-- SymbolCompound
Struct --|> SymbolCompound
Union  --|> SymbolCompound

class Member {
  + namespace() -> :member
}
TypedSymbol <|-- Member
SymbolCompound "1" -- "0..n" Member : members >

' Naming the class Enum confuses plantuml => CeEnum
class CeEnum {
  + constants?()
  + constants_count() : int
  + namespace() -> :tag
}
Symbol <|-- CeEnum

class EnumConstant {
  + linkage() -> :none
  + value : Integer
}
Symbol <|-- EnumConstant
CeEnum "1" -- "0..n" EnumConstant : constants >

class Macro {
  + namespace() -> :macro
}
Symbol <|-- Macro

class MacroDefinition {
}
Definition <|-- MacroDefinition
Macro "1" -- "1" MacroDefinition

class Statement {
}
' A Token can be associated with more than one Statement due to PP conditionals. (XXX Necessary?)
Statement "0..n" -- "1..n" Token : origin >
AtomicStatement --|> Statement
BlockStatement  --|> Statement
' The BlockStatement being a Function's implementation is the only Statement not associated with a parent BlockStatement.
BlockStatement "0..1" -- "0..n" Statement : content >

class Expression {
}
' A Token can be associated with more than one Expression due to PP conditionals. (XXX Necessary?)
Expression "0..n" -- "1..n" Token : origin >
AtomicExpression --|> Expression
CompoundExpression --|> Expression
CompoundExpression "0..1" -- "0..n" Expression : content >

class Reference {
}
Symbol "1" -- "0..n" Reference : references >

Invokation <|-- Reference
MacroExpansion <|-- Invokation
FunctionInvokation <|-- Invokation

LvalueRef <|-- Reference
ArgumentRef <|-- Reference
ConstArgref <|-- ArgumentRef

ArgumentRef "0..n" -- "1" FunctionInvokation


'       ===========
' endpkg Semantics
'       ===========
}

@enduml

'
'PpDirective <|-- PpDefine
'PpDirective <|-- PpUndef
'PpDirective <|-- PpPragma
'PpDirective <|-- PpLine
'PpDirective <|-- PpError
'PpDirective <|-- PpInclude
'PpInclude "1" o-- "1" File
'PpDirective <|-- PpConditional
'PpConditional "*" o-- "1" PhysicLine
'PpConditional <|-- PpCondIf
'PpConditional <|-- PpCondElif
'PpConditional <|-- PpCondElse
'PpConditional <|-- PpCondEndif
'PpCondIf "1" *-- "1" PpCondElse
'PpCondIf "*" *-- "1" PpCondElif
'PpCondIf "1" *-- "1" PpCondEndif
'
'Statement <|-- CompoundStatement
'CompoundStatement "*" o-- "1" Statement
'
'Statement <|-- StmntMDefinition
'Statement <|-- StmntMDeclaration
'
'Statement <|-- StmntMControl
'StmntMControl <|-- IfStatement
'IfStatement "1" o-- "1" KwIf
'IfStatement "0..1" o-- "1" KwElse
'IfStatement "1..2" -- "1" Statement
'IfStatement "1" -- "1" BoolExpression
'StmntMControl <|-- SwitchStatement
'SwitchStatement "1" o-- "1" KwSwitch
'SwitchStatement "*" o-- "1" SwitchStatementCase
'SwitchStatement "1" o-- "1" SwitchStatementDefault
'StmntMControl <|-- SwitchStatementCase
'SwitchStatementCase "*" o-- "1" KwMCrtlSwitch
'SwitchStatementCase "*" -- "1" Statement
'SwitchStatementCase <|-- SwitchStatementDefault
'StmntMControl <|-- DoWhileStatement
'DoWhileStatement "1" -- "1" Statement
'DoWhileStatement "1" -- "1" BoolExpression
'StmntMControl <|-- WhileStatement
'WhileStatement "1" -- "1" Statement
'WhileStatement "1" -- "1" BoolExpression
'StmntMControl <|-- ForStatement
'ForStatement "1" -- "1" Statement
'ForStatement "1" -- "1" BoolExpression
'
'Identifier <|-- Function
'Identifier <|-- Variable
'
'Identifier "*" -- "1" IdentifierDeclaration
'
''Identifier "1" -- "1" IdentifierDefinition
'
'IdentifierDefinition  "1" -- "1" IdentifierSignature
'IdentifierDeclaration "1" -- "1" IdentifierSignature
'
'IdentifierDefinition <|-- FunctionDefinition
'IdentifierDefinition <|-- VariableDefinition
'
'IdentifierDeclaration <|-- VariableDeclaration
'
'Function -- FunctionDefinition
'FunctionDefinition "1" -- "1" CompoundStatement
'
'Variable -- VariableDefinition
'VariableDefinition "1" -- "1" Expression : init_value
'
'StmntMDefinition <|-- StmntTypedef
'StmntMDefinition <|-- IdentifierDefinition
'StmntMDefinition <|-- TagDefinition
'StmntMDefinition <|-- LabelDefinition
'
'TagDefinition "*" -- "1" VariableDeclaration
'
'StmntMDeclaration <|-- IdentifierDeclaration
'StmntMDeclaration <|-- TagDeclaration
'
'
'Token <|-- TkWord
'TkWord <|-- Keyword
'TkWord <|-- Identifier
'Identifier <|-- IdOrdinary
'Identifier <|-- IdTag
'Identifier <|-- IdLabel
'Identifier <|-- IdMember
'
'Token <|-- Stringliteral
'Token <|-- TkNumber
'TkNumber <|-- IntLiteral
'TkNumber <|-- FloatLiteral
'
'Token <|-- Symbol
'
'class Symbol {
'  String text
'  static leaf?() = true
'}
'
'Token <|-- Expression
'
'Expression <|-- BoolExpression
'
'
'Whitespace <|-- Comment
'Comment "*" -- "*" PhysicLine
'
'class Keyword {
'  static const String TEXT
'  static leaf?() = true
'}
'
'Keyword <|-- KwMStdType
'KwMStdType <|-- Kw_Bool
'KwMStdType <|-- KwChar
'KwMStdType <|-- KwDouble
'KwMStdType <|-- KwFloat
'KwMStdType <|-- KwInt
'KwMStdType <|-- KwVoid
'
'Keyword <|-- KwMTypeVariant
'KwMTypeVariant <|-- KwLong
'KwMTypeVariant <|-- KwShort
'KwMTypeVariant <|-- KwSigned
'KwMTypeVariant <|-- KwUnsigned
'
'Keyword <|-- KwMTypedef
'KwMTypedef <|-- KwEnum
'KwMTypedef <|-- KwStruct
'KwMTypedef <|-- KwTypedef
'KwMTypedef <|-- KwUnion
'
'Keyword <|-- KwMTypeQualifier
'KwMTypeQualifier <|-- KwMonst
'KwMTypeQualifier <|-- KwRestrict
'KwMTypeQualifier <|-- KwVolatile
'
'Keyword <|-- KwMStorageQualifier
'KwMStorageQualifier <|-- KwAuto
'KwMStorageQualifier <|-- KwExtern
'KwMStorageQualifier <|-- KwRegister
'KwMStorageQualifier <|-- KwStatic
'
'Keyword <|-- KwMControl
'KwMControl <|-- KwBreak
'KwMControl <|-- KwContinue
'KwMControl <|-- KwDo
'KwMControl <|-- KwElse
'KwMControl <|-- KwFor
'KwMControl <|-- KwGoto
'KwMControl <|-- KwIf
'KwMControl <|-- KwReturn
'KwMControl <|-- KwSwitch
'KwMControl <|-- KwWhile 
'KwMControl <|-- KwMCrtlSwitch
'KwMCrtlSwitch <|-- KwCase
'KwMCrtlSwitch <|-- KwDefault
'
'Keyword <|-- KwMMisc
'KwMMisc <|-- Kw_Complex
'KwMMisc <|-- Kw_Imaginary
'
'Keyword <|-- KwInline
'Keyword <|-- KwSizeof

