@startuml

legend center
  Copyright (c) 2014-2016  Thilo Fischer.
  
  This diagram is part of the developer documentation of rocc.
 
  rocc is free software with a multi-license approach: you can
  redistribute it and/or modify it as if it was under the terms of the
  GNU General Public License as long as the things you publish to
  satisfy the GPL's copyleft still can be integrated into the rocc
  project's main codebase without restricting the multi-license
  approach. See LICENSE.txt from the top-level directory for details.
 
  The same license applies to this document.

  --

  The rocc architecture is work in progress.  Deviations of the diagram
  from the actual source code (or vice versa) must be expected.
endlegend

skinparam monochrome true

title Variable Definition

participant TranslationUnit
participant CompilationContext
participant Token
participant CompilationBranch
participant "a : ArisingSpecification" as ArisingSpecification
participant "s : Variable < Symbol" as Symbol
participant "d : Declaration" as Declaration
participant "D : Definition" as Definition
participant "i : Initializer" as Initializer
database "ScopeStack (part of\nCompilationBranch)" as ScopeStack

activate ScopeStack
rnote over ScopeStack : a

... parsed optional storage class, type qualifier, type specifier and parsed identifier ...

[-> Token : pursue_branch
rnote over Token : ""=""

activate Token

Token -> CompilationBranch : finish_current_scope
activate CompilationBranch

'note over ArisingSpecification : CompilationBranch#\ncurrent_scope
CompilationBranch -> ArisingSpecification : finalize
activate ArisingSpecification

create Symbol
ArisingSpecification -> Symbol : new

ArisingSpecification -> CompilationBranch : declare_symbol(s)
activate CompilationBranch

CompilationBranch -> CompilationContext : announce_symbol(s)
activate CompilationContext
CompilationBranch <-- CompilationContext : symbol
deactivate CompilationContext

create Declaration
CompilationBranch -> Declaration : new(symbol, conditions)

ArisingSpecification <-- CompilationBranch
deactivate CompilationBranch

CompilationBranch <-- ArisingSpecification : d
deactivate ArisingSpecification

rnote over ScopeStack : a
CompilationBranch -> CompilationBranch : leave_scope
deactivate ScopeStack
destroy ArisingSpecification

Token <-- CompilationBranch : d
deactivate CompilationBranch

create Definition
Token -> Definition : new(d)
Token -> CompilationBranch : enter_scope(D)
activate ScopeStack
rnote over ScopeStack : D
'note over Definition : CompilationBranch#\ncurrent_scope

create Initializer
Token -> Initializer : new
Token -> CompilationBranch : enter_scope(i)
activate ScopeStack
rnote over ScopeStack : i
'note over Initializer : CompilationBranch#\ncurrent_scope

[<-- Token
deactivate Token

... parse Initializer (RValue expression) ...

[-> Token : pursue_branch
rnote over Token : "";"" or "",""

activate Token

Token -> CompilationBranch : finish_current_scope
activate CompilationBranch

'note over Initializer : CompilationBranch#\ncurrent_scope
CompilationBranch -> Initializer : finalize

rnote over ScopeStack : i
CompilationBranch -> CompilationBranch : leave_scope
deactivate ScopeStack
rnote over ScopeStack : D

'note over Definition : CompilationBranch#\ncurrent_scope

CompilationBranch -> Definition : add_body(i)

CompilationBranch -> Definition : finalize

CompilationBranch -> Symbol : announce_definition(D)
'activate Symbol
'CompilationBranch <-- Symbol
'deactivate Symbol

CompilationBranch -> TranslationUnit : announce_semantic_element(D)
activate TranslationUnit
CompilationBranch <-- TranslationUnit
deactivate TranslationUnit

rnote over ScopeStack : D
CompilationBranch -> CompilationBranch : leave_scope
deactivate ScopeStack

Token <-- CompilationBranch : D
deactivate CompilationBranch

[<-- Token
deactivate Token

@enduml

